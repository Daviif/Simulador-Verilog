$date
	Sun Aug 10 22:00:25 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench_simple $end
$scope module uut $end
$var wire 1 ! MemWrite_safe $end
$var wire 1 " RegWrite_safe $end
$var wire 1 # branch_taken $end
$var wire 1 $ clock $end
$var wire 1 % pc_write $end
$var wire 1 & raw_hazard $end
$var wire 1 ' reset $end
$var wire 1 ( zero $end
$var wire 32 ) write_back_data [31:0] $end
$var wire 5 * rs2 [4:0] $end
$var wire 5 + rs1 [4:0] $end
$var wire 32 , read_data2 [31:0] $end
$var wire 32 - read_data1 [31:0] $end
$var wire 5 . rd [4:0] $end
$var wire 32 / pc_prox [31:0] $end
$var wire 32 0 pc_plus4 [31:0] $end
$var wire 32 1 pc [31:0] $end
$var wire 7 2 opcode [6:0] $end
$var wire 32 3 instrucao [31:0] $end
$var wire 32 4 immediate [31:0] $end
$var wire 7 5 funct7 [6:0] $end
$var wire 3 6 funct3 [2:0] $end
$var wire 32 7 branch_alvo [31:0] $end
$var wire 32 8 alu_result [31:0] $end
$var wire 32 9 alu_entrada2 [31:0] $end
$var wire 4 : alu_control [3:0] $end
$var wire 1 ; RegWrite $end
$var wire 1 < MemtoReg $end
$var wire 1 = MemWrite $end
$var wire 32 > MemRead_data [31:0] $end
$var wire 1 ? MemRead $end
$var wire 1 @ Branch $end
$var wire 1 A ALUSrc $end
$var wire 2 B ALUOp [1:0] $end
$var reg 1 C prev_RegWrite $end
$var reg 5 D prev_rd [4:0] $end
$var reg 1 E stall_cycle $end
$scope module InstMem $end
$var wire 32 F instrucao [31:0] $end
$var wire 32 G endereco [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 H i [31:0] $end
$upscope $end
$upscope $end
$scope module alu $end
$var wire 32 I entrada2 [31:0] $end
$var wire 1 ( zero $end
$var wire 32 J entrada1 [31:0] $end
$var wire 4 K alu_control [3:0] $end
$var reg 32 L resultado [31:0] $end
$upscope $end
$scope module aluCtrl $end
$var wire 3 M funct3 [2:0] $end
$var wire 7 N funct7 [6:0] $end
$var wire 2 O ALUOp [1:0] $end
$var reg 4 P alu_control [3:0] $end
$upscope $end
$scope module ctrl $end
$var wire 7 Q opcode [6:0] $end
$var reg 2 R ALUOp [1:0] $end
$var reg 1 A ALUSrc $end
$var reg 1 @ Branch $end
$var reg 1 ? MemRead $end
$var reg 1 = MemWrite $end
$var reg 1 < MemtoReg $end
$var reg 1 ; RegWrite $end
$upscope $end
$scope module dataMem $end
$var wire 1 ? MemRead $end
$var wire 1 ! MemWrite $end
$var wire 1 $ clock $end
$var wire 32 S endereco [31:0] $end
$var wire 32 T write_data [31:0] $end
$var wire 32 U read_data [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 V i [31:0] $end
$upscope $end
$upscope $end
$scope module immGen $end
$var wire 32 W instrucao [31:0] $end
$var wire 7 X opcode [6:0] $end
$var reg 32 Y imm_out [31:0] $end
$upscope $end
$scope module pc_mux $end
$var wire 32 Z entrada1 [31:0] $end
$var wire 32 [ entrada2 [31:0] $end
$var wire 1 # seletor $end
$var wire 32 \ saida [31:0] $end
$upscope $end
$scope module pc_reg $end
$var wire 1 $ clock $end
$var wire 32 ] pc_prox [31:0] $end
$var wire 1 % pc_write $end
$var wire 1 ' reset $end
$var reg 32 ^ pc [31:0] $end
$upscope $end
$scope module registradores $end
$var wire 1 " RegWrite $end
$var wire 1 $ clock $end
$var wire 5 _ rd [4:0] $end
$var wire 5 ` rs1 [4:0] $end
$var wire 5 a rs2 [4:0] $end
$var wire 32 b write_data [31:0] $end
$var reg 32 c read_data1 [31:0] $end
$var reg 32 d read_data2 [31:0] $end
$var integer 32 e i [31:0] $end
$upscope $end
$scope module write_back_mux $end
$var wire 32 f entrada1 [31:0] $end
$var wire 32 g entrada2 [31:0] $end
$var wire 1 < seletor $end
$var wire 32 h saida [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1010 h
b0 g
b1010 f
b100000 e
b0 d
b0 c
b1010 b
b1010 a
b0 `
b1 _
b0 ^
b100 ]
b100 \
b1010 [
b100 Z
b1010 Y
b10011 X
b101000000000000010010011 W
b100000000 V
b0 U
b0 T
b1010 S
b0 R
b10011 Q
b0 P
b0 O
b0 N
b0 M
b1010 L
b0 K
b0 J
b1010 I
b1000000 H
b0 G
b101000000000000010010011 F
0E
b0 D
0C
b0 B
1A
0@
0?
b0 >
0=
0<
1;
b0 :
b1010 9
b1010 8
b1010 7
b0 6
b0 5
b1010 4
b101000000000000010010011 3
b10011 2
b0 1
b100 0
b100 /
b1 .
b0 -
b0 ,
b0 +
b1010 *
b1010 )
0(
1'
0&
1%
0$
0#
1"
0!
$end
#5000
1$
#10000
0$
0'
#15000
b11 )
b11 b
b11 h
b11 8
b11 L
b11 S
b11 f
b11 9
b11 I
b11 4
b11 Y
b11 *
b11 a
b10 .
b10 _
b1100000000000100010011 3
b1100000000000100010011 F
b1100000000000100010011 W
b1000 /
b1000 \
b1000 ]
b111 7
b111 [
b1000 0
b1000 Z
b100 1
b100 G
b100 ^
1C
b1 D
1$
#20000
0$
#25000
0"
0%
1&
b1101 )
b1101 b
b1101 h
b1101 8
b1101 L
b1101 S
b1101 f
b11 ,
b11 T
b11 d
b1010 -
b1010 J
b1010 c
b10 B
b10 O
b10 R
1;
0A
b0 4
b0 Y
b110011 X
b10 *
b10 a
b1 +
b1 `
b11 .
b11 _
b110011 2
b110011 Q
b1000001000000110110011 3
b1000001000000110110011 F
b1000001000000110110011 W
b1100 /
b1100 \
b1100 ]
b10 D
b1000 7
b1000 [
b1100 0
b1100 Z
b1000 1
b1000 G
b1000 ^
1$
#30000
0$
#35000
1"
1%
0&
1E
0C
1$
#40000
0$
#45000
b111 )
b111 b
b111 h
b111 8
b111 L
b111 S
b111 f
b1 :
b1 K
b1 P
b100000 5
b100000 N
b100 .
b100 _
b1000000001000001000001000110011 3
b1000000001000001000001000110011 F
b1000000001000001000001000110011 W
b10000 /
b10000 \
b10000 ]
0E
1C
b11 D
b1100 7
b1100 [
b10000 0
b10000 Z
b1100 1
b1100 G
b1100 ^
1$
#50000
0$
#55000
b101 )
b101 b
b101 h
b101 8
b101 L
b101 S
b101 f
b11111111111111111111111111111011 9
b11111111111111111111111111111011 I
b0 :
b0 K
b0 P
b0 ,
b0 T
b0 d
1A
b0 B
b0 O
b0 R
1;
b11111111111111111111111111111011 4
b11111111111111111111111111111011 Y
b10011 X
b1111111 5
b1111111 N
b11011 *
b11011 a
b101 .
b101 _
b10011 2
b10011 Q
b11111111101100001000001010010011 3
b11111111101100001000001010010011 F
b11111111101100001000001010010011 W
b10100 /
b10100 \
b10100 ]
b1011 7
b1011 [
b10100 0
b10100 Z
b10000 1
b10000 G
b10000 ^
b100 D
1$
#60000
0$
#65000
b0 )
b0 b
b0 h
1(
b0 8
b0 L
b0 S
b0 f
b0 9
b0 I
b0 -
b0 J
b0 c
b0 4
b0 Y
b0 5
b0 N
b0 *
b0 a
b0 +
b0 `
b0 .
b0 _
b10011 3
b10011 F
b10011 W
b11000 /
b11000 \
b11000 ]
b101 D
b10100 7
b10100 [
b11000 0
b11000 Z
b10100 1
b10100 G
b10100 ^
1$
#70000
0$
#75000
b11100 /
b11100 \
b11100 ]
b11000 7
b11000 [
b11100 0
b11100 Z
b11000 1
b11000 G
b11000 ^
b0 D
1$
#80000
0$
#85000
b100000 /
b100000 \
b100000 ]
b11100 7
b11100 [
b100000 0
b100000 Z
b11100 1
b11100 G
b11100 ^
1$
#90000
0$
#95000
b100100 /
b100100 \
b100100 ]
b100000 7
b100000 [
b100100 0
b100100 Z
b100000 1
b100000 G
b100000 ^
1$
#100000
0$
#105000
b101000 /
b101000 \
b101000 ]
b100100 7
b100100 [
b101000 0
b101000 Z
b100100 1
b100100 G
b100100 ^
1$
#110000
0$
#115000
b101100 /
b101100 \
b101100 ]
b101000 7
b101000 [
b101100 0
b101100 Z
b101000 1
b101000 G
b101000 ^
1$
#120000
0$
#125000
b110000 /
b110000 \
b110000 ]
b101100 7
b101100 [
b110000 0
b110000 Z
b101100 1
b101100 G
b101100 ^
1$
#130000
0$
#135000
b110100 /
b110100 \
b110100 ]
b110000 7
b110000 [
b110100 0
b110100 Z
b110000 1
b110000 G
b110000 ^
1$
#140000
0$
#145000
b111000 /
b111000 \
b111000 ]
b110100 7
b110100 [
b111000 0
b111000 Z
b110100 1
b110100 G
b110100 ^
1$
#150000
0$
#155000
b111100 /
b111100 \
b111100 ]
b111000 7
b111000 [
b111100 0
b111100 Z
b111000 1
b111000 G
b111000 ^
1$
#160000
0$
#165000
b1000000 /
b1000000 \
b1000000 ]
b111100 7
b111100 [
b1000000 0
b1000000 Z
b111100 1
b111100 G
b111100 ^
1$
#170000
0$
#175000
b1000100 /
b1000100 \
b1000100 ]
b1000000 7
b1000000 [
b1000100 0
b1000100 Z
b1000000 1
b1000000 G
b1000000 ^
1$
#180000
0$
#185000
b1001000 /
b1001000 \
b1001000 ]
b1000100 7
b1000100 [
b1001000 0
b1001000 Z
b1000100 1
b1000100 G
b1000100 ^
1$
#190000
0$
#195000
b1001100 /
b1001100 \
b1001100 ]
b1001000 7
b1001000 [
b1001100 0
b1001100 Z
b1001000 1
b1001000 G
b1001000 ^
1$
#200000
0$
#205000
b1010000 /
b1010000 \
b1010000 ]
b1001100 7
b1001100 [
b1010000 0
b1010000 Z
b1001100 1
b1001100 G
b1001100 ^
1$
#210000
0$
