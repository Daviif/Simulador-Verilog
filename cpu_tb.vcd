$date
	Fri Jul 18 20:03:22 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_tb $end
$var reg 1 ! clock $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var wire 1 # zero $end
$var wire 32 $ write_back_data [31:0] $end
$var wire 5 % rs2 [4:0] $end
$var wire 5 & rs1 [4:0] $end
$var wire 32 ' read_data2 [31:0] $end
$var wire 32 ( read_data1 [31:0] $end
$var wire 5 ) rd [4:0] $end
$var wire 32 * pc_plus4 [31:0] $end
$var wire 32 + pc_next [31:0] $end
$var wire 32 , pc [31:0] $end
$var wire 7 - opcode [6:0] $end
$var wire 32 . mem_read_data [31:0] $end
$var wire 32 / instrucao [31:0] $end
$var wire 32 0 imm_out [31:0] $end
$var wire 1 1 funct7 $end
$var wire 3 2 funct3 [2:0] $end
$var wire 32 3 branch_target [31:0] $end
$var wire 32 4 alu_result [31:0] $end
$var wire 32 5 alu_input_b [31:0] $end
$var wire 3 6 alu_control_signal [2:0] $end
$var wire 1 7 RegWrite $end
$var wire 1 8 MemtoReg $end
$var wire 1 9 MemWrite $end
$var wire 1 : MemRead $end
$var wire 1 ; Branch $end
$var wire 1 < ALUSrc $end
$var wire 2 = ALUOp [1:0] $end
$scope module alu_ctrl $end
$var wire 3 > funct3 [2:0] $end
$var wire 1 1 funct7 $end
$var wire 2 ? aluOp [1:0] $end
$var reg 3 @ alu_control [2:0] $end
$upscope $end
$scope module alu_src_mux $end
$var wire 32 A y [31:0] $end
$var wire 1 < sel $end
$var wire 32 B b [31:0] $end
$var wire 32 C a [31:0] $end
$upscope $end
$scope module alu_unit $end
$var wire 3 D alu_control [2:0] $end
$var wire 32 E b [31:0] $end
$var wire 32 F resultado [31:0] $end
$var wire 32 G a [31:0] $end
$var reg 1 # zero $end
$upscope $end
$scope module control_unit $end
$var wire 7 H opcode [6:0] $end
$var reg 2 I ALUOp [1:0] $end
$var reg 1 < ALUSrc $end
$var reg 1 ; Branch $end
$var reg 1 : MemRead $end
$var reg 1 9 MemWrite $end
$var reg 1 8 MemtoReg $end
$var reg 1 7 RegWrite $end
$upscope $end
$scope module dmem $end
$var wire 1 : MemRead $end
$var wire 1 9 MemWrite $end
$var wire 1 ! clock $end
$var wire 32 J endereco [31:0] $end
$var wire 32 K write_data [31:0] $end
$var wire 32 L read_data [31:0] $end
$upscope $end
$scope module imem $end
$var wire 32 M instrucao [31:0] $end
$var wire 32 N endereco [31:0] $end
$upscope $end
$scope module imm_generator $end
$var wire 32 O instrucao [31:0] $end
$var reg 32 P immediate [31:0] $end
$upscope $end
$scope module pc_reg $end
$var wire 1 ! clock $end
$var wire 32 Q pc_prox [31:0] $end
$var wire 1 " reset $end
$var reg 32 R pc_out [31:0] $end
$upscope $end
$scope module regs $end
$var wire 1 7 RegWrite $end
$var wire 1 ! clock $end
$var wire 5 S rd [4:0] $end
$var wire 32 T read_data1 [31:0] $end
$var wire 32 U read_data2 [31:0] $end
$var wire 5 V rs1 [4:0] $end
$var wire 5 W rs2 [4:0] $end
$var wire 32 X write_data [31:0] $end
$upscope $end
$scope module write_back_mux $end
$var wire 32 Y a [31:0] $end
$var wire 32 Z b [31:0] $end
$var wire 1 8 sel $end
$var wire 32 [ y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx [
bx Z
bx Y
bx X
b1010 W
b0 V
bx U
bx T
b1 S
b0 R
bx Q
bx P
b101000000000000010010011 O
b0 N
b101000000000000010010011 M
bx L
bx K
bx J
bx I
b10011 H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
b0 >
bx =
x<
x;
x:
x9
x8
x7
bx 6
bx 5
bx 4
bx 3
b0 2
01
bx 0
b101000000000000010010011 /
bx .
b10011 -
b0 ,
bx +
b100 *
b1 )
bx (
bx '
b0 &
b1010 %
bx $
x#
1"
0!
$end
#5000
1!
#10000
0!
0"
#15000
x1
bx %
bx W
bx &
bx V
bx 2
bx >
bx )
bx S
bx -
bx H
bx /
bx M
bx O
bx *
bx ,
bx N
bx R
1!
#20000
0!
#25000
1!
#30000
0!
#35000
1!
#40000
0!
#45000
1!
#50000
0!
#55000
1!
#60000
0!
#65000
1!
#70000
0!
#75000
1!
#80000
0!
#85000
1!
#90000
0!
#95000
1!
#100000
0!
#105000
1!
#110000
0!
#115000
1!
#120000
0!
#125000
1!
#130000
0!
#135000
1!
#140000
0!
#145000
1!
#150000
0!
#155000
1!
#160000
0!
#165000
1!
#170000
0!
#175000
1!
#180000
0!
#185000
1!
#190000
0!
#195000
1!
#200000
0!
#205000
1!
#210000
0!
#215000
1!
#220000
0!
#225000
1!
#230000
0!
#235000
1!
#240000
0!
#245000
1!
#250000
0!
#255000
1!
#260000
0!
#265000
1!
#270000
0!
#275000
1!
#280000
0!
#285000
1!
#290000
0!
#295000
1!
#300000
0!
#305000
1!
#310000
0!
#315000
1!
#320000
0!
#325000
1!
#330000
0!
#335000
1!
#340000
0!
#345000
1!
#350000
0!
#355000
1!
#360000
0!
#365000
1!
#370000
0!
#375000
1!
#380000
0!
#385000
1!
#390000
0!
#395000
1!
#400000
0!
#405000
1!
#410000
0!
#415000
1!
#420000
0!
#425000
1!
#430000
0!
#435000
1!
#440000
0!
#445000
1!
#450000
0!
#455000
1!
#460000
0!
#465000
1!
#470000
0!
#475000
1!
#480000
0!
#485000
1!
#490000
0!
#495000
1!
#500000
0!
#505000
1!
#510000
0!
